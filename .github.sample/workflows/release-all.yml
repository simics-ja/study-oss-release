name: Complete Release Pipeline

on:
  push:
    tags:
      - 'release-*'
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      npm_publish:
        description: 'Publish NPM package'
        required: true
        type: boolean
        default: true
      docker_publish:
        description: 'Publish Docker image'
        required: true
        type: boolean
        default: true
      go_release:
        description: 'Release Go binaries'
        required: true
        type: boolean
        default: true

jobs:
  npm-release:
    if: github.event.inputs.npm_publish == 'true' || startsWith(github.ref, 'refs/tags/release-')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      - name: Update NPM version
        working-directory: ./npm-package
        run: |
          VERSION=${{ github.event.inputs.release_version || github.ref_name }}
          VERSION=${VERSION#release-}
          npm version $VERSION --no-git-tag-version
      - name: Test NPM package
        working-directory: ./npm-package
        run: npm test
      - name: Publish to NPM
        working-directory: ./npm-package
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker-release:
    if: github.event.inputs.docker_publish == 'true' || startsWith(github.ref, 'refs/tags/release-')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine version
        id: version
        run: |
          VERSION=${{ github.event.inputs.release_version || github.ref_name }}
          VERSION=${VERSION#release-}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-app
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/oss-release-demo-app:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/oss-release-demo-app:latest

  go-binaries-release:
    if: github.event.inputs.go_release == 'true' || startsWith(github.ref, 'refs/tags/release-')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Build all binaries
        working-directory: ./go-cli
        run: make build-all
      - name: Create checksums
        working-directory: ./go-cli/dist
        run: sha256sum * > checksums.txt
      - name: Determine version
        id: version
        run: |
          VERSION=${{ github.event.inputs.release_version || github.ref_name }}
          VERSION=${VERSION#release-}
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Release ${{ steps.version.outputs.version }}
            
            ### What's Included
            
            - 📦 **NPM Package**: @study-oss/string-formatter
            - 🐳 **Docker Image**: ghcr.io/${{ github.repository_owner }}/oss-release-demo-app
            - 💻 **CLI Binaries**: Cross-platform executables
            
            ### Installation
            
            #### NPM Package
            ```bash
            npm install @study-oss/string-formatter@${{ steps.version.outputs.version }}
            ```
            
            #### Docker Image
            ```bash
            docker pull ghcr.io/${{ github.repository_owner }}/oss-release-demo-app:${{ steps.version.outputs.version }}
            ```
            
            #### CLI Binaries
            Download the appropriate binary for your platform from the assets below.
          draft: false
          prerelease: false
      - name: Upload binaries to release
        run: |
          for file in go-cli/dist/*; do
            gh release upload ${{ steps.version.outputs.version }} "$file" \
              --repo ${{ github.repository }}
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    needs: [npm-release, docker-release, go-binaries-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Release Summary
        run: |
          echo "# 📋 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Version: ${{ github.event.inputs.release_version || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Component Status" >> $GITHUB_STEP_SUMMARY
          echo "- NPM Package: ${{ needs.npm-release.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Image: ${{ needs.docker-release.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Go Binaries: ${{ needs.go-binaries-release.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY